1. 数据类型判断

function typeOf(obj) {
  return Object.prototype.toString.call(obj).slice(8, -1).toLowerCase()
}
typeOf([])        // 'array'
typeOf({})        // 'object'
typeOf(new Date)  // 'date'

2. 继承

2.1 原型链继承
  function Animal() {
     this.colors = ['black', 'white']
  };
  Animal.prototype.getColor = function () {
     return this.colors
  }

  function Dog() {}
  Dog.protorype = new Animal()

  const dog1 = new Dog()
  dog1.colors.push('brown')
  const dog2 = new Dog()
  console.log(dog2.colors)
  
 原型链继承存在的问题:
  1. 原型中包含的引用类型属性将被所有实例共享；
  2. 子类在实例化的时候不能给父类构造函数传参；
  
 2.2 借用构造函数实现继承
  
  function Animal(name) {
    this.name = name;
    this.getName = function () {
      return this.name
    }
  }
  function Dog(name) {
    Animal.call(this, name)
  }
  Dog.prototype = new Animal()
  
  借用构造函数实现继承解决了原型链继承的 2 个问题：引用类型共享问题以及传参问题。但是由于方法必须定义在构造函数中，所以会导致每次创建子类实例都会创建一遍方法。
  
  2.3 组合继承
    function Animal(name) {
       this.name = name;
       this.colors = ['black', 'white']
    }
    Animal.prototype.getName = function() {
       return this.name
    }
    
    function Dog(name, age) {
      Animal.call(this, name)
      this.age = age
    }
    Dog.prototype = new Animal()
    Dog.prototype.constructor = Dog
    
    let dog1 = new Dog('奶昔', 2)
    dog1.colors.push('brown')
    let dog2 = new Dog('哈赤', 1)
    console.log(dog2) 
    // { name: "哈赤", colors: ["black", "white"], age: 1 }
    
  基本的思路是使用原型链继承原型上的属性和方法，而通过盗用构造函数继承实例属性。这样既可以把方法定义在原型上以实现重用，又可以让每个实例都有自己的属性。
  问题点: 调用了 2 次父类构造函数
  
    2.4 寄生式组合继承
    
    基本思路: 不直接调用父类构造函数给子类原型赋值，而是通过创建空函数 F 获取父类原型的副本。
    寄生式组合继承写法上和组合继承基本类似，区别是如下这里：
    
    - Dog.prototype =  new Animal()
    - Dog.prototype.constructor = Dog
    
    方案1. 
    function object(o) {
        function F() {}
        F.prototype = o
        return new F()
    }
    function inheritPrototype(child, parent) {
        let prototype = object(parent.prototype)
        prototype.constructor = child
        child.prototype = prototype
    }
    inheritPrototype(Dog, Animal) 
    
    方案2. 
    + Dog.prototype =  Object.create(Animal.prototype)
    + Dog.prototype.constructor = Dog
    
    2.5 class实现继承
    class Animal () {
       constuctor(name) {
          this.name = name
       }
       getName() {
          return this.name
       }
    }
    
    class Dog extends Animal {
      constructor(name, age) {
          super(name)
          this.age = age
      }
    }

3. 数组去重

  3.1 ES5实现
    function unique(arr) {
      const res = arr.filter((item, index, array) => {
        return array.indexOf(item) === index
      })
      return res
    }
  3.2 ES6实现
    let unique = arr => [...new Set(arr)]
    
4. 数组扁平化
  
    4.1  [1, [2, [3]]].flat(2)
    4.2  ES5实现: 递归
        function flatten(arr) {
            var result = [];
            for (var i = 0, len = arr.length; i < len; i++) {
                if (Array.isArray(arr[i])) {
                    result = result.concat(flatten(arr[i]))
                } else {
                    result.push(arr[i])
                }
            }
            return result;
        }

    4.3  ES6实现:
      function flatten(arr) {
          while (arr.some(item => Array.isArray(item))) {
              arr = [].concat(...arr);
          }
          return arr;
      }
      
5. 深浅拷贝

  5.1 浅拷贝: 只考虑对象类型
    function shallowCopy(obj) {
      if (typeof obj !== 'object') return
      const newObj = obj instanceof Array ? [] : {}
      for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
          newObj[key] = obj[key]
        }
      }
      return newObj
    }
  5.2 简单版深拷贝: 只考虑普通对象属性, 不考虑内置对象和函数
    function deepClone(obj) {
      if (typeof obj !== 'object') return
      const newObj = obj instanceof Array ? [] : {}
      for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
          newObj[key] = typeof obj[key] === 'object' ? deepClone(obj[key]) : obj[key]
        }
      }
      return newObj
    }
  5.3 复杂版深克隆: 基于简单版的基础上, 还考虑了内置对象比如Date, RegExp等对象和函数以及解决了循环引用的问题
    const isObject = (target) => (typeof target === "object" || typeof target === "function") && target !== null;

    function deepClone(target, map = new WeakMap()) {
        if (map.get(target)) {
            return target;
        }
        // 获取当前值的构造函数：获取它的类型
        let constructor = target.constructor;
        // 检测当前对象target是否与正则、日期格式对象匹配
        if (/^(RegExp|Date)$/i.test(constructor.name)) {
            // 创建一个新的特殊对象(正则类/日期类)的实例
            return new constructor(target);  
        }
        if (isObject(target)) {
            map.set(target, true);  // 为循环引用的对象做标记
            const cloneTarget = Array.isArray(target) ? [] : {};
            for (let prop in target) {
                if (target.hasOwnProperty(prop)) {
                    cloneTarget[prop] = deepClone(target[prop], map);
                }
            }
            return cloneTarget;
        } else {
            return target;
        }
    }

